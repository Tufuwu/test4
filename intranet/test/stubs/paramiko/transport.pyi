# Stubs for paramiko.transport (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
import threading
from paramiko.util import ClosingContextManager

class Transport(threading.Thread, ClosingContextManager):
    active = ... # type: Any
    sock = ... # type: Any
    packetizer = ... # type: Any
    local_version = ... # type: Any
    remote_version = ... # type: Any
    local_cipher = ... # type: Any
    local_kex_init = ... # type: Any
    local_mac = ... # type: Any
    local_compression = ... # type: Any
    session_id = ... # type: Any
    host_key_type = ... # type: Any
    host_key = ... # type: Any
    use_gss_kex = ... # type: Any
    gss_kex_used = ... # type: Any
    kexgss_ctxt = ... # type: Any
    gss_host = ... # type: Any
    kex_engine = ... # type: Any
    H = ... # type: Any
    K = ... # type: Any
    initial_kex_done = ... # type: Any
    in_kex = ... # type: Any
    authenticated = ... # type: Any
    lock = ... # type: Any
    channel_events = ... # type: Any
    channels_seen = ... # type: Any
    default_max_packet_size = ... # type: Any
    default_window_size = ... # type: Any
    saved_exception = ... # type: Any
    clear_to_send = ... # type: Any
    clear_to_send_lock = ... # type: Any
    clear_to_send_timeout = ... # type: Any
    log_name = ... # type: Any
    logger = ... # type: Any
    auth_handler = ... # type: Any
    global_response = ... # type: Any
    completion_event = ... # type: Any
    banner_timeout = ... # type: Any
    handshake_timeout = ... # type: Any
    server_mode = ... # type: Any
    server_object = ... # type: Any
    server_key_dict = ... # type: Any
    server_accepts = ... # type: Any
    server_accept_cv = ... # type: Any
    subsystem_table = ... # type: Any
    def __init__(self, sock, default_window_size=..., default_max_packet_size=..., gss_kex=False, gss_deleg_creds=True): ...
    def atfork(self): ...
    def get_security_options(self): ...
    def set_gss_host(self, gss_host): ...
    def start_client(self, event=None): ...
    def start_server(self, event=None, server=None): ...
    def add_server_key(self, key): ...
    def get_server_key(self): ...
    @staticmethod
    def load_server_moduli(filename=None): ...
    def close(self): ...
    def get_remote_server_key(self): ...
    def is_active(self): ...
    def open_session(self, window_size=None, max_packet_size=None, timeout=None): ...
    def open_x11_channel(self, src_addr=None): ...
    def open_forward_agent_channel(self): ...
    def open_forwarded_tcpip_channel(self, src_addr, dest_addr): ...
    def open_channel(self, kind, dest_addr=None, src_addr=None, window_size=None, max_packet_size=None, timeout=None): ...
    def request_port_forward(self, address, port, handler=None): ...
    def cancel_port_forward(self, address, port): ...
    def open_sftp_client(self): ...
    def send_ignore(self, byte_count=None): ...
    def renegotiate_keys(self): ...
    def set_keepalive(self, interval): ...
    def global_request(self, kind, data=None, wait=True): ...
    def accept(self, timeout=None): ...
    def connect(self, hostkey=None, username='', password=None, pkey=None, gss_host=None, gss_auth=False, gss_kex=False, gss_deleg_creds=True): ...
    def get_exception(self): ...
    def set_subsystem_handler(self, name, handler, *larg, **kwarg): ...
    def is_authenticated(self): ...
    def get_username(self): ...
    def get_banner(self): ...
    def auth_none(self, username): ...
    def auth_password(self, username, password, event=None, fallback=True): ...
    def auth_publickey(self, username, key, event=None): ...
    def auth_interactive(self, username, handler, submethods=''): ...
    def auth_interactive_dumb(self, username, handler=None, submethods=''): ...
    def auth_gssapi_with_mic(self, username, gss_host, gss_deleg_creds): ...
    def auth_gssapi_keyex(self, username): ...
    def set_log_channel(self, name): ...
    def get_log_channel(self): ...
    def set_hexdump(self, hexdump): ...
    def get_hexdump(self): ...
    def use_compression(self, compress=True): ...
    def getpeername(self): ...
    def stop_thread(self): ...
    sys = ... # type: Any
    def run(self): ...

class SecurityOptions:
    def __init__(self, transport): ...
    @property
    def ciphers(self): ...
    @ciphers.setter
    def ciphers(self, x): ...
    @property
    def digests(self): ...
    @digests.setter
    def digests(self, x): ...
    @property
    def key_types(self): ...
    @key_types.setter
    def key_types(self, x): ...
    @property
    def kex(self): ...
    @kex.setter
    def kex(self, x): ...
    @property
    def compression(self): ...
    @compression.setter
    def compression(self, x): ...

class ChannelMap:
    def __init__(self): ...
    def put(self, chanid, chan): ...
    def get(self, chanid): ...
    def delete(self, chanid): ...
    def values(self): ...
    def __len__(self): ...
