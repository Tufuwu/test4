# Stubs for django.db.models.query (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

REPR_OUTPUT_SIZE = ... # type: Any
EmptyResultSet = ... # type: Any

class BaseIterable:
    queryset = ... # type: Any
    def __init__(self, queryset): ...

class ModelIterable(BaseIterable):
    def __iter__(self): ...

class ValuesIterable(BaseIterable):
    def __iter__(self): ...

class ValuesListIterable(BaseIterable):
    def __iter__(self): ...

class FlatValuesListIterable(BaseIterable):
    def __iter__(self): ...

class QuerySet:
    model = ... # type: Any
    query = ... # type: Any
    def __init__(self, model=None, query=None, using=None, hints=None): ...
    def as_manager(cls): ...
    def __deepcopy__(self, memo): ...
    def __len__(self): ...
    def __iter__(self): ...
    def __bool__(self): ...
    def __nonzero__(self): ...
    def __getitem__(self, k): ...
    def __and__(self, other): ...
    def __or__(self, other): ...
    def iterator(self): ...
    def aggregate(self, *args, **kwargs): ...
    def count(self): ...
    def get(self, *args, **kwargs): ...
    def create(self, **kwargs): ...
    def bulk_create(self, objs, batch_size=None): ...
    def get_or_create(self, defaults=None, **kwargs): ...
    def update_or_create(self, defaults=None, **kwargs): ...
    def earliest(self, field_name=None): ...
    def latest(self, field_name=None): ...
    def first(self): ...
    def last(self): ...
    def in_bulk(self, id_list): ...
    def delete(self): ...
    def update(self, **kwargs): ...
    def exists(self): ...
    def raw(self, raw_query, params=None, translations=None, using=None): ...
    def values(self, *fields): ...
    def values_list(self, *fields, **kwargs): ...
    def dates(self, field_name, kind, order=''): ...
    def datetimes(self, field_name, kind, order='', tzinfo=None): ...
    def none(self): ...
    def all(self): ...
    def filter(self, *args, **kwargs): ...
    def exclude(self, *args, **kwargs): ...
    def complex_filter(self, filter_obj): ...
    def select_for_update(self, nowait=False): ...
    def select_related(self, *fields): ...
    def prefetch_related(self, *lookups): ...
    def annotate(self, *args, **kwargs): ...
    def order_by(self, *field_names): ...
    def distinct(self, *field_names): ...
    def extra(self, select=None, where=None, params=None, tables=None, order_by=None, select_params=None): ...
    def reverse(self): ...
    def defer(self, *fields): ...
    def only(self, *fields): ...
    def using(self, alias): ...
    def ordered(self): ...
    @property
    def db(self): ...
    value_annotation = ... # type: Any
    def is_compatible_query_object_type(self, opts, field): ...

class InstanceCheckMeta(type):
    def __instancecheck__(self, instance): ...

class EmptyQuerySet:
    def __init__(self, *args, **kwargs): ...

class RawQuerySet:
    raw_query = ... # type: Any
    model = ... # type: Any
    query = ... # type: Any
    params = ... # type: Any
    translations = ... # type: Any
    def __init__(self, raw_query, model=None, query=None, params=None, translations=None, using=None, hints=None): ...
    def resolve_model_init_order(self): ...
    def __iter__(self): ...
    def __getitem__(self, k): ...
    @property
    def db(self): ...
    def using(self, alias): ...
    @property
    def columns(self): ...
    @property
    def model_fields(self): ...

class Prefetch:
    prefetch_through = ... # type: Any
    prefetch_to = ... # type: Any
    queryset = ... # type: Any
    to_attr = ... # type: Any
    def __init__(self, lookup, queryset=None, to_attr=None): ...
    def add_prefix(self, prefix): ...
    def get_current_prefetch_through(self, level): ...
    def get_current_prefetch_to(self, level): ...
    def get_current_to_attr(self, level): ...
    def get_current_queryset(self, level): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

def normalize_prefetch_lookups(lookups, prefix=None): ...
def prefetch_related_objects(result_cache, related_lookups): ...
def get_prefetcher(instance, attr): ...
def prefetch_one_level(instances, prefetcher, lookup, level): ...

class RelatedPopulator:
    db = ... # type: Any
    cols_start = ... # type: Any
    cols_end = ... # type: Any
    init_list = ... # type: Any
    reorder_for_init = ... # type: Any
    model_cls = ... # type: Any
    pk_idx = ... # type: Any
    related_populators = ... # type: Any
    reverse_cache_name = ... # type: Any
    cache_name = ... # type: Any
    def __init__(self, klass_info, select, db): ...
    def get_deferred_cls(self, klass_info, init_list): ...
    def populate(self, row, from_obj): ...

def get_related_populators(klass_info, select, db): ...
